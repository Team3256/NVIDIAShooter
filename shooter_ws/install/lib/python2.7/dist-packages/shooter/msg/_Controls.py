# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from shooter/Controls.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Controls(genpy.Message):
  _md5sum = "ad06e20480b263726a89fb1db30326ca"
  _type = "shooter/Controls"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[2] drive
bool[2] shoot
bool[2] reload
float32 pivot
"""
  __slots__ = ['drive','shoot','reload','pivot']
  _slot_types = ['float32[2]','bool[2]','bool[2]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drive,shoot,reload,pivot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Controls, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drive is None:
        self.drive = [0.,0.]
      if self.shoot is None:
        self.shoot = [False,False]
      if self.reload is None:
        self.reload = [False,False]
      if self.pivot is None:
        self.pivot = 0.
    else:
      self.drive = [0.,0.]
      self.shoot = [False,False]
      self.reload = [False,False]
      self.pivot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_2f.pack(*self.drive))
      buff.write(_struct_2B.pack(*self.shoot))
      buff.write(_struct_2B.pack(*self.reload))
      buff.write(_struct_f.pack(self.pivot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      self.drive = _struct_2f.unpack(str[start:end])
      start = end
      end += 2
      self.shoot = _struct_2B.unpack(str[start:end])
      self.shoot = map(bool, self.shoot)
      start = end
      end += 2
      self.reload = _struct_2B.unpack(str[start:end])
      self.reload = map(bool, self.reload)
      start = end
      end += 4
      (self.pivot,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.drive.tostring())
      buff.write(self.shoot.tostring())
      buff.write(self.reload.tostring())
      buff.write(_struct_f.pack(self.pivot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      self.drive = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 2
      self.shoot = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=2)
      self.shoot = map(bool, self.shoot)
      start = end
      end += 2
      self.reload = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=2)
      self.reload = map(bool, self.reload)
      start = end
      end += 4
      (self.pivot,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_2B = struct.Struct("<2B")
_struct_f = struct.Struct("<f")
