// Generated by gencpp from file shooter/Controls.msg
// DO NOT EDIT!


#ifndef SHOOTER_MESSAGE_CONTROLS_H
#define SHOOTER_MESSAGE_CONTROLS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shooter
{
template <class ContainerAllocator>
struct Controls_
{
  typedef Controls_<ContainerAllocator> Type;

  Controls_()
    : drive()
    , shoot()
    , reload()
    , pivot(0.0)  {
      drive.assign(0.0);

      shoot.assign(false);

      reload.assign(false);
  }
  Controls_(const ContainerAllocator& _alloc)
    : drive()
    , shoot()
    , reload()
    , pivot(0.0)  {
  (void)_alloc;
      drive.assign(0.0);

      shoot.assign(false);

      reload.assign(false);
  }



   typedef boost::array<float, 2>  _drive_type;
  _drive_type drive;

   typedef boost::array<uint8_t, 2>  _shoot_type;
  _shoot_type shoot;

   typedef boost::array<uint8_t, 2>  _reload_type;
  _reload_type reload;

   typedef float _pivot_type;
  _pivot_type pivot;




  typedef boost::shared_ptr< ::shooter::Controls_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shooter::Controls_<ContainerAllocator> const> ConstPtr;

}; // struct Controls_

typedef ::shooter::Controls_<std::allocator<void> > Controls;

typedef boost::shared_ptr< ::shooter::Controls > ControlsPtr;
typedef boost::shared_ptr< ::shooter::Controls const> ControlsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shooter::Controls_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shooter::Controls_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shooter

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'shooter': ['/home/ubuntu/shooter_ws/src/shooter/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shooter::Controls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shooter::Controls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shooter::Controls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shooter::Controls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shooter::Controls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shooter::Controls_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shooter::Controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad06e20480b263726a89fb1db30326ca";
  }

  static const char* value(const ::shooter::Controls_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad06e20480b26372ULL;
  static const uint64_t static_value2 = 0x6a89fb1db30326caULL;
};

template<class ContainerAllocator>
struct DataType< ::shooter::Controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shooter/Controls";
  }

  static const char* value(const ::shooter::Controls_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shooter::Controls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[2] drive\n\
bool[2] shoot\n\
bool[2] reload\n\
float32 pivot\n\
";
  }

  static const char* value(const ::shooter::Controls_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shooter::Controls_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive);
      stream.next(m.shoot);
      stream.next(m.reload);
      stream.next(m.pivot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Controls_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shooter::Controls_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shooter::Controls_<ContainerAllocator>& v)
  {
    s << indent << "drive[]" << std::endl;
    for (size_t i = 0; i < v.drive.size(); ++i)
    {
      s << indent << "  drive[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.drive[i]);
    }
    s << indent << "shoot[]" << std::endl;
    for (size_t i = 0; i < v.shoot.size(); ++i)
    {
      s << indent << "  shoot[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.shoot[i]);
    }
    s << indent << "reload[]" << std::endl;
    for (size_t i = 0; i < v.reload.size(); ++i)
    {
      s << indent << "  reload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reload[i]);
    }
    s << indent << "pivot: ";
    Printer<float>::stream(s, indent + "  ", v.pivot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHOOTER_MESSAGE_CONTROLS_H
